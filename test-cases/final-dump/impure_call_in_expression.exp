======================================================================
AFTER EVERYTHING:
 Module impure_call_in_expression
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : impure_call_in_expression.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: impure_call_in_expression.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    impure_call_in_expression.fib<0>(10:wybe.int, ?tmp#0##0:wybe.int) #0 @impure_call_in_expression:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#2##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#2##0:wybe.phantom, ?tmp#3##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#3##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn


fib > {impure} (3 calls)
0: impure_call_in_expression.fib<0>
fib(x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(x##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool) @int:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm icmp_eq(x##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:
            foreign llvm sub(x##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
            impure_call_in_expression.fib<0>(~tmp#4##0:wybe.int, ?tmp#3##0:wybe.int) #3 @impure_call_in_expression:nn:nn
            foreign llvm sub(~x##0:wybe.int, 2:wybe.int, ?tmp#6##0:wybe.int) @int:nn:nn
            impure_call_in_expression.fib<0>(~tmp#6##0:wybe.int, ?tmp#5##0:wybe.int) #5 @impure_call_in_expression:nn:nn
            foreign llvm add(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn

        1:
            foreign llvm move(1:wybe.int, ?#result##0:wybe.int) @impure_call_in_expression:nn:nn


    1:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @impure_call_in_expression:nn:nn


  LLVM code       :

; ModuleID = 'impure_call_in_expression'


 


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"impure_call_in_expression.<0>"() alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"impure_call_in_expression.fib<0>"(i64  10)  
  tail call ccc  void  @print_int(i64  %0)  
  ret void 
}


define external fastcc  i64 @"impure_call_in_expression.fib<0>"(i64  %"x##0")    {
entry:
  %0 = icmp eq i64 %"x##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  ret i64 0 
if.else:
  %1 = icmp eq i64 %"x##0", 1 
  br i1 %1, label %if.then1, label %if.else1 
if.then1:
  ret i64 1 
if.else1:
  %2 = sub   i64 %"x##0", 1 
  %3 = tail call fastcc  i64  @"impure_call_in_expression.fib<0>"(i64  %2)  
  %4 = sub   i64 %"x##0", 2 
  %5 = tail call fastcc  i64  @"impure_call_in_expression.fib<0>"(i64  %4)  
  %6 = add   i64 %3, %5 
  ret i64 %6 
}
