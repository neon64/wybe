======================================================================
AFTER EVERYTHING:
 Module tcmc_multiple_outputs
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : tcmc_multiple_outputs.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: tcmc_multiple_outputs.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(15,(tcmc_multiple_outputs.appendtwice<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 3 []]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#27##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#27##0:wybe.list(T), ?tmp#28##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#28##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#31##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#31##0:wybe.list(T), ?tmp#32##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 6:T) @list:nn:nn
    foreign lpvm mutate(~tmp#32##0:wybe.list(T), ?tmp#6##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#35##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#35##0:wybe.list(T), ?tmp#36##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 5:T) @list:nn:nn
    foreign lpvm mutate(~tmp#36##0:wybe.list(T), ?tmp#5##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#39##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#39##0:wybe.list(T), ?tmp#40##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#40##0:wybe.list(T), ?tmp#4##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#43##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#43##0:wybe.list(T), ?tmp#44##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 8:T) @list:nn:nn
    foreign lpvm mutate(~tmp#44##0:wybe.list(T), ?tmp#9##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#47##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#47##0:wybe.list(T), ?tmp#48##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 7:T) @list:nn:nn
    foreign lpvm mutate(~tmp#48##0:wybe.list(T), ?tmp#8##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#9##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#51##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#51##0:wybe.list(T), ?tmp#52##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 11:T) @list:nn:nn
    foreign lpvm mutate(~tmp#52##0:wybe.list(T), ?tmp#13##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#55##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#55##0:wybe.list(T), ?tmp#56##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 10:T) @list:nn:nn
    foreign lpvm mutate(~tmp#56##0:wybe.list(T), ?tmp#12##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#13##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#59##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#59##0:wybe.list(T), ?tmp#60##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 9:T) @list:nn:nn
    foreign lpvm mutate(~tmp#60##0:wybe.list(T), ?tmp#11##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#12##0:wybe.list(T)) @list:nn:nn
    tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c](~tmp#0##0:wybe.list(wybe.int), ~tmp#4##0:wybe.list(wybe.int), outByReference result1##0:wybe.list(wybe.int), ~tmp#8##0:wybe.list(wybe.int), ~tmp#11##0:wybe.list(wybe.int), outByReference result2##0:wybe.list(wybe.int)) #15 @tcmc_multiple_outputs:nn:nn
    wybe.list.println<0>(~result1##0:wybe.list(wybe.int), tcmc_multiple_outputs.gen#1<0><>:{resource}(wybe.int))<Everything; Everything> #16 @tcmc_multiple_outputs:nn:nn
    wybe.list.println<0>(~result2##0:wybe.list(wybe.int), tcmc_multiple_outputs.gen#1<0><>:{resource}(wybe.int))<Everything; Everything> #17 @tcmc_multiple_outputs:nn:nn


appendtwice > (4 calls)
0: tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c]
appendtwice(front1##0:wybe.list(T), back1##0:wybe.list(T), outByReference result1##0:wybe.list(T), front2##0:wybe.list(T), back2##0:wybe.list(T), outByReference result2##0:wybe.list(T))<{}; {}>:
  AliasPairs: [(back1##0,result1##0),(back2##0,result2##0)]
  InterestingCallProperties: [InterestingUnaliased 0,InterestingUnaliased 3]
  MultiSpeczDepInfo: [(2,(tcmc_multiple_outputs.appendtwice<0>,fromList [NonAliasedParamCond 0 [0],NonAliasedParamCond 3 [3]])),(7,(tcmc_multiple_outputs.appendtwice<0>,fromList [NonAliasedParamCond 0 [0],NonAliasedParamCond 3 []])),(12,(tcmc_multiple_outputs.appendtwice<0>,fromList [NonAliasedParamCond 0 [],NonAliasedParamCond 3 [3]]))]
    foreign llvm icmp_ne(front1##0:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.bool)
    case ~tmp#14##0:wybe.bool of
    0:
        foreign llvm icmp_ne(front2##0:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.bool)
        case ~tmp#16##0:wybe.bool of
        0:
            foreign llvm move(~back1##0:wybe.list(T), ?result1##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn
            foreign llvm move(~back2##0:wybe.list(T), ?result2##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn

        1:
            foreign lpvm access(front2##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h2##0:T) @list:nn:nn
            foreign lpvm access(~front2##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t2##0:wybe.list(T)) @list:nn:nn
            foreign llvm move(~back1##0:wybe.list(T), ?result1##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h2##0:T) @list:nn:nn
            tcmc_multiple_outputs.appendtwice<0>[410bae77d3](0:wybe.list(T), 0:wybe.list(T), outByReference tmp#8##0:wybe.list(T), ~t2##0:wybe.list(T), ~back2##0:wybe.list(T), outByReference tail2##0:wybe.list(T)) #12 @tcmc_multiple_outputs:nn:nn
            foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?result2##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail2##0:wybe.list(T)) @list:nn:nn


    1:
        foreign lpvm access(front1##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h1##0:T) @list:nn:nn
        foreign lpvm access(~front1##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t1##0:wybe.list(T)) @list:nn:nn
        foreign llvm icmp_ne(front2##0:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.bool)
        case ~tmp#16##0:wybe.bool of
        0:
            foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h1##0:T) @list:nn:nn
            foreign llvm move(~back2##0:wybe.list(T), ?result2##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn
            tcmc_multiple_outputs.appendtwice<0>[3869c8b78e](~t1##0:wybe.list(T), ~back1##0:wybe.list(T), outByReference tail1##0:wybe.list(T), 0:wybe.list(T), 0:wybe.list(T), outByReference tmp#4##0:wybe.list(T)) #7 @tcmc_multiple_outputs:nn:nn
            foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?result1##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail1##0:wybe.list(T)) @list:nn:nn

        1:
            foreign lpvm access(front2##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h2##0:T) @list:nn:nn
            foreign lpvm access(~front2##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t2##0:wybe.list(T)) @list:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h1##0:T) @list:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h2##0:T) @list:nn:nn
            tcmc_multiple_outputs.appendtwice<0>(~t1##0:wybe.list(T), ~back1##0:wybe.list(T), outByReference tail1##0:wybe.list(T), ~t2##0:wybe.list(T), ~back2##0:wybe.list(T), outByReference tail2##0:wybe.list(T)) #2 @tcmc_multiple_outputs:nn:nn
            foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?result1##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail1##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?result2##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail2##0:wybe.list(T)) @list:nn:nn


 [410bae77d3] [NonAliasedParam 0] :
    foreign llvm icmp_ne(front1##0:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.bool)
    case ~tmp#14##0:wybe.bool of
    0:
        foreign llvm icmp_ne(front2##0:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.bool)
        case ~tmp#16##0:wybe.bool of
        0:
            foreign llvm move(~back1##0:wybe.list(T), ?result1##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn
            foreign llvm move(~back2##0:wybe.list(T), ?result2##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn

        1:
            foreign lpvm access(front2##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h2##0:T) @list:nn:nn
            foreign lpvm access(~front2##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t2##0:wybe.list(T)) @list:nn:nn
            foreign llvm move(~back1##0:wybe.list(T), ?result1##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h2##0:T) @list:nn:nn
            tcmc_multiple_outputs.appendtwice<0>[410bae77d3](0:wybe.list(T), 0:wybe.list(T), outByReference tmp#8##0:wybe.list(T), ~t2##0:wybe.list(T), ~back2##0:wybe.list(T), outByReference tail2##0:wybe.list(T)) #12 @tcmc_multiple_outputs:nn:nn
            foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?result2##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail2##0:wybe.list(T)) @list:nn:nn


    1:
        foreign lpvm access(front1##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t1##0:wybe.list(T)) @list:nn:nn
        foreign llvm icmp_ne(front2##0:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.bool)
        case ~tmp#16##0:wybe.bool of
        0:
            foreign llvm move(~back2##0:wybe.list(T), ?result2##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn
            tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c](~t1##0:wybe.list(T), ~back1##0:wybe.list(T), outByReference tail1##0:wybe.list(T), 0:wybe.list(T), 0:wybe.list(T), outByReference tmp#4##0:wybe.list(T)) #7 @tcmc_multiple_outputs:nn:nn
            foreign lpvm mutate(~front1##0:wybe.list(T), ?result1##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail1##0:wybe.list(T)) @list:nn:nn

        1:
            foreign lpvm access(front2##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h2##0:T) @list:nn:nn
            foreign lpvm access(~front2##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t2##0:wybe.list(T)) @list:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h2##0:T) @list:nn:nn
            tcmc_multiple_outputs.appendtwice<0>[410bae77d3](~t1##0:wybe.list(T), ~back1##0:wybe.list(T), outByReference tail1##0:wybe.list(T), ~t2##0:wybe.list(T), ~back2##0:wybe.list(T), outByReference tail2##0:wybe.list(T)) #2 @tcmc_multiple_outputs:nn:nn
            foreign lpvm mutate(~front1##0:wybe.list(T), ?result1##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail1##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?result2##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail2##0:wybe.list(T)) @list:nn:nn



 [d4b0b4930c] [NonAliasedParam 0,NonAliasedParam 3] :
    foreign llvm icmp_ne(front1##0:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.bool)
    case ~tmp#14##0:wybe.bool of
    0:
        foreign llvm icmp_ne(front2##0:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.bool)
        case ~tmp#16##0:wybe.bool of
        0:
            foreign llvm move(~back1##0:wybe.list(T), ?result1##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn
            foreign llvm move(~back2##0:wybe.list(T), ?result2##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn

        1:
            foreign lpvm access(front2##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t2##0:wybe.list(T)) @list:nn:nn
            foreign llvm move(~back1##0:wybe.list(T), ?result1##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn
            tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c](0:wybe.list(T), 0:wybe.list(T), outByReference tmp#8##0:wybe.list(T), ~t2##0:wybe.list(T), ~back2##0:wybe.list(T), outByReference tail2##0:wybe.list(T)) #12 @tcmc_multiple_outputs:nn:nn
            foreign lpvm mutate(~front2##0:wybe.list(T), ?result2##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail2##0:wybe.list(T)) @list:nn:nn


    1:
        foreign lpvm access(front1##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h1##0:T) @list:nn:nn
        foreign lpvm access(front1##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t1##0:wybe.list(T)) @list:nn:nn
        foreign llvm icmp_ne(front2##0:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.bool)
        case ~tmp#16##0:wybe.bool of
        0:
            foreign llvm move(~back2##0:wybe.list(T), ?result2##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn
            tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c](~t1##0:wybe.list(T), ~back1##0:wybe.list(T), outByReference tail1##0:wybe.list(T), 0:wybe.list(T), 0:wybe.list(T), outByReference tmp#4##0:wybe.list(T)) #7 @tcmc_multiple_outputs:nn:nn
            foreign lpvm mutate(~front1##0:wybe.list(T), ?result1##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail1##0:wybe.list(T)) @list:nn:nn

        1:
            foreign lpvm access(front2##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h2##0:T) @list:nn:nn
            foreign lpvm access(front2##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t2##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~front2##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h1##0:T) @list:nn:nn
            foreign lpvm mutate(~front1##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h2##0:T) @list:nn:nn
            tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c](~t1##0:wybe.list(T), ~back1##0:wybe.list(T), outByReference tail1##0:wybe.list(T), ~t2##0:wybe.list(T), ~back2##0:wybe.list(T), outByReference tail2##0:wybe.list(T)) #2 @tcmc_multiple_outputs:nn:nn
            foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?result1##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail1##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?result2##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail2##0:wybe.list(T)) @list:nn:nn



 [3869c8b78e] [NonAliasedParam 3] :
    foreign llvm icmp_ne(front1##0:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.bool)
    case ~tmp#14##0:wybe.bool of
    0:
        foreign llvm icmp_ne(front2##0:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.bool)
        case ~tmp#16##0:wybe.bool of
        0:
            foreign llvm move(~back1##0:wybe.list(T), ?result1##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn
            foreign llvm move(~back2##0:wybe.list(T), ?result2##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn

        1:
            foreign lpvm access(front2##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t2##0:wybe.list(T)) @list:nn:nn
            foreign llvm move(~back1##0:wybe.list(T), ?result1##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn
            tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c](0:wybe.list(T), 0:wybe.list(T), outByReference tmp#8##0:wybe.list(T), ~t2##0:wybe.list(T), ~back2##0:wybe.list(T), outByReference tail2##0:wybe.list(T)) #12 @tcmc_multiple_outputs:nn:nn
            foreign lpvm mutate(~front2##0:wybe.list(T), ?result2##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail2##0:wybe.list(T)) @list:nn:nn


    1:
        foreign lpvm access(front1##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h1##0:T) @list:nn:nn
        foreign lpvm access(~front1##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t1##0:wybe.list(T)) @list:nn:nn
        foreign llvm icmp_ne(front2##0:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.bool)
        case ~tmp#16##0:wybe.bool of
        0:
            foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h1##0:T) @list:nn:nn
            foreign llvm move(~back2##0:wybe.list(T), ?result2##0:wybe.list(T)) @tcmc_multiple_outputs:nn:nn
            tcmc_multiple_outputs.appendtwice<0>[3869c8b78e](~t1##0:wybe.list(T), ~back1##0:wybe.list(T), outByReference tail1##0:wybe.list(T), 0:wybe.list(T), 0:wybe.list(T), outByReference tmp#4##0:wybe.list(T)) #7 @tcmc_multiple_outputs:nn:nn
            foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?result1##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail1##0:wybe.list(T)) @list:nn:nn

        1:
            foreign lpvm access(front2##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h2##0:T) @list:nn:nn
            foreign lpvm access(front2##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t2##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~front2##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h1##0:T) @list:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h2##0:T) @list:nn:nn
            tcmc_multiple_outputs.appendtwice<0>[3869c8b78e](~t1##0:wybe.list(T), ~back1##0:wybe.list(T), outByReference tail1##0:wybe.list(T), ~t2##0:wybe.list(T), ~back2##0:wybe.list(T), outByReference tail2##0:wybe.list(T)) #2 @tcmc_multiple_outputs:nn:nn
            foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?result1##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail1##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?result2##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail2##0:wybe.list(T)) @list:nn:nn




gen#1 > {inline} (2 calls)
0: tcmc_multiple_outputs.gen#1<0>
gen#1(x##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~x##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn

  LLVM code       :

; ModuleID = 'tcmc_multiple_outputs'


 


@tcmc_multiple_outputs.0 =    constant [1 x i64] [i64 ptrtoint (void (i64, i64)* @"tcmc_multiple_outputs.gen#1<0>" to i64)]


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.list.println<0>"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"tcmc_multiple_outputs.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 3, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 0, i64* %7 
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 2, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 %2, i64* %15 
  %16 = trunc i64 16 to i32  
  %17 = tail call ccc  i8*  @wybe_malloc(i32  %16)  
  %18 = ptrtoint i8* %17 to i64 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 1, i64* %20 
  %21 = add   i64 %18, 8 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 %10, i64* %23 
  %24 = trunc i64 16 to i32  
  %25 = tail call ccc  i8*  @wybe_malloc(i32  %24)  
  %26 = ptrtoint i8* %25 to i64 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  store  i64 6, i64* %28 
  %29 = add   i64 %26, 8 
  %30 = inttoptr i64 %29 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  store  i64 0, i64* %31 
  %32 = trunc i64 16 to i32  
  %33 = tail call ccc  i8*  @wybe_malloc(i32  %32)  
  %34 = ptrtoint i8* %33 to i64 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  store  i64 5, i64* %36 
  %37 = add   i64 %34, 8 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  store  i64 %26, i64* %39 
  %40 = trunc i64 16 to i32  
  %41 = tail call ccc  i8*  @wybe_malloc(i32  %40)  
  %42 = ptrtoint i8* %41 to i64 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  store  i64 4, i64* %44 
  %45 = add   i64 %42, 8 
  %46 = inttoptr i64 %45 to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  store  i64 %34, i64* %47 
  %48 = trunc i64 16 to i32  
  %49 = tail call ccc  i8*  @wybe_malloc(i32  %48)  
  %50 = ptrtoint i8* %49 to i64 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  store  i64 8, i64* %52 
  %53 = add   i64 %50, 8 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  store  i64 0, i64* %55 
  %56 = trunc i64 16 to i32  
  %57 = tail call ccc  i8*  @wybe_malloc(i32  %56)  
  %58 = ptrtoint i8* %57 to i64 
  %59 = inttoptr i64 %58 to i64* 
  %60 = getelementptr  i64, i64* %59, i64 0 
  store  i64 7, i64* %60 
  %61 = add   i64 %58, 8 
  %62 = inttoptr i64 %61 to i64* 
  %63 = getelementptr  i64, i64* %62, i64 0 
  store  i64 %50, i64* %63 
  %64 = trunc i64 16 to i32  
  %65 = tail call ccc  i8*  @wybe_malloc(i32  %64)  
  %66 = ptrtoint i8* %65 to i64 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  store  i64 11, i64* %68 
  %69 = add   i64 %66, 8 
  %70 = inttoptr i64 %69 to i64* 
  %71 = getelementptr  i64, i64* %70, i64 0 
  store  i64 0, i64* %71 
  %72 = trunc i64 16 to i32  
  %73 = tail call ccc  i8*  @wybe_malloc(i32  %72)  
  %74 = ptrtoint i8* %73 to i64 
  %75 = inttoptr i64 %74 to i64* 
  %76 = getelementptr  i64, i64* %75, i64 0 
  store  i64 10, i64* %76 
  %77 = add   i64 %74, 8 
  %78 = inttoptr i64 %77 to i64* 
  %79 = getelementptr  i64, i64* %78, i64 0 
  store  i64 %66, i64* %79 
  %80 = trunc i64 16 to i32  
  %81 = tail call ccc  i8*  @wybe_malloc(i32  %80)  
  %82 = ptrtoint i8* %81 to i64 
  %83 = inttoptr i64 %82 to i64* 
  %84 = getelementptr  i64, i64* %83, i64 0 
  store  i64 9, i64* %84 
  %85 = add   i64 %82, 8 
  %86 = inttoptr i64 %85 to i64* 
  %87 = getelementptr  i64, i64* %86, i64 0 
  store  i64 %74, i64* %87 
  %88 = alloca i64 
  %89 = alloca i64 
   call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c]"(i64  %18, i64  %42, i64*  %88, i64  %58, i64  %82, i64*  %89)  
  %90 = load  i64, i64* %88 
  %91 = load  i64, i64* %89 
  tail call fastcc  void  @"wybe.list.println<0>"(i64  %90, i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @tcmc_multiple_outputs.0, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.list.println<0>"(i64  %91, i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @tcmc_multiple_outputs.0, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  void @"tcmc_multiple_outputs.appendtwice<0>"(i64  %"front1##0", i64  %"back1##0", i64*  %"result1##0", i64  %"front2##0", i64  %"back2##0", i64*  %"result2##0")    {
entry:
  %0 = icmp ne i64 %"front1##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"front1##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"front1##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = icmp ne i64 %"front2##0", 0 
  br i1 %8, label %if.then1, label %if.else1 
if.else:
  %38 = icmp ne i64 %"front2##0", 0 
  br i1 %38, label %if.then2, label %if.else2 
if.then1:
  %9 = inttoptr i64 %"front2##0" to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"front2##0", 8 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = trunc i64 16 to i32  
  %17 = tail call ccc  i8*  @wybe_malloc(i32  %16)  
  %18 = ptrtoint i8* %17 to i64 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 %3, i64* %20 
  %21 = trunc i64 16 to i32  
  %22 = tail call ccc  i8*  @wybe_malloc(i32  %21)  
  %23 = ptrtoint i8* %22 to i64 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  store  i64 %11, i64* %25 
  %26 = add   i64 %18, 8 
  %27 = inttoptr i64 %26 to i64* 
  store  i64 %18, i64* %"result1##0" 
  %28 = add   i64 %23, 8 
  %29 = inttoptr i64 %28 to i64* 
  store  i64 %23, i64* %"result2##0" 
  musttail call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>"(i64  %7, i64  %"back1##0", i64*  %27, i64  %15, i64  %"back2##0", i64*  %29)  
  ret void 
if.else1:
  %30 = trunc i64 16 to i32  
  %31 = tail call ccc  i8*  @wybe_malloc(i32  %30)  
  %32 = ptrtoint i8* %31 to i64 
  %33 = inttoptr i64 %32 to i64* 
  %34 = getelementptr  i64, i64* %33, i64 0 
  store  i64 %3, i64* %34 
  store  i64 %"back2##0", i64* %"result2##0" 
  %35 = add   i64 %32, 8 
  %36 = inttoptr i64 %35 to i64* 
  store  i64 %32, i64* %"result1##0" 
  %37 = alloca i64 
   call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>[3869c8b78e]"(i64  %7, i64  %"back1##0", i64*  %36, i64  0, i64  0, i64*  %37)  
  ret void 
if.then2:
  %39 = inttoptr i64 %"front2##0" to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  %41 = load  i64, i64* %40 
  %42 = add   i64 %"front2##0", 8 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  %45 = load  i64, i64* %44 
  store  i64 %"back1##0", i64* %"result1##0" 
  %46 = trunc i64 16 to i32  
  %47 = tail call ccc  i8*  @wybe_malloc(i32  %46)  
  %48 = ptrtoint i8* %47 to i64 
  %49 = inttoptr i64 %48 to i64* 
  %50 = getelementptr  i64, i64* %49, i64 0 
  store  i64 %41, i64* %50 
  %51 = add   i64 %48, 8 
  %52 = inttoptr i64 %51 to i64* 
  store  i64 %48, i64* %"result2##0" 
  %53 = alloca i64 
   call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>[410bae77d3]"(i64  0, i64  0, i64*  %53, i64  %45, i64  %"back2##0", i64*  %52)  
  ret void 
if.else2:
  store  i64 %"back1##0", i64* %"result1##0" 
  store  i64 %"back2##0", i64* %"result2##0" 
  ret void 
}


define external fastcc  void @"tcmc_multiple_outputs.appendtwice<0>[410bae77d3]"(i64  %"front1##0", i64  %"back1##0", i64*  %"result1##0", i64  %"front2##0", i64  %"back2##0", i64*  %"result2##0")    {
entry:
  %0 = icmp ne i64 %"front1##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = add   i64 %"front1##0", 8 
  %2 = inttoptr i64 %1 to i64* 
  %3 = getelementptr  i64, i64* %2, i64 0 
  %4 = load  i64, i64* %3 
  %5 = icmp ne i64 %"front2##0", 0 
  br i1 %5, label %if.then1, label %if.else1 
if.else:
  %25 = icmp ne i64 %"front2##0", 0 
  br i1 %25, label %if.then2, label %if.else2 
if.then1:
  %6 = inttoptr i64 %"front2##0" to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  %8 = load  i64, i64* %7 
  %9 = add   i64 %"front2##0", 8 
  %10 = inttoptr i64 %9 to i64* 
  %11 = getelementptr  i64, i64* %10, i64 0 
  %12 = load  i64, i64* %11 
  %13 = trunc i64 16 to i32  
  %14 = tail call ccc  i8*  @wybe_malloc(i32  %13)  
  %15 = ptrtoint i8* %14 to i64 
  %16 = inttoptr i64 %15 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  store  i64 %8, i64* %17 
  %18 = add   i64 %"front1##0", 8 
  %19 = inttoptr i64 %18 to i64* 
  store  i64 %"front1##0", i64* %"result1##0" 
  %20 = add   i64 %15, 8 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 %15, i64* %"result2##0" 
  musttail call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>[410bae77d3]"(i64  %4, i64  %"back1##0", i64*  %19, i64  %12, i64  %"back2##0", i64*  %21)  
  ret void 
if.else1:
  store  i64 %"back2##0", i64* %"result2##0" 
  %22 = add   i64 %"front1##0", 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 %"front1##0", i64* %"result1##0" 
  %24 = alloca i64 
   call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c]"(i64  %4, i64  %"back1##0", i64*  %23, i64  0, i64  0, i64*  %24)  
  ret void 
if.then2:
  %26 = inttoptr i64 %"front2##0" to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %29 = add   i64 %"front2##0", 8 
  %30 = inttoptr i64 %29 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  %32 = load  i64, i64* %31 
  store  i64 %"back1##0", i64* %"result1##0" 
  %33 = trunc i64 16 to i32  
  %34 = tail call ccc  i8*  @wybe_malloc(i32  %33)  
  %35 = ptrtoint i8* %34 to i64 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  store  i64 %28, i64* %37 
  %38 = add   i64 %35, 8 
  %39 = inttoptr i64 %38 to i64* 
  store  i64 %35, i64* %"result2##0" 
  %40 = alloca i64 
   call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>[410bae77d3]"(i64  0, i64  0, i64*  %40, i64  %32, i64  %"back2##0", i64*  %39)  
  ret void 
if.else2:
  store  i64 %"back1##0", i64* %"result1##0" 
  store  i64 %"back2##0", i64* %"result2##0" 
  ret void 
}


define external fastcc  void @"tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c]"(i64  %"front1##0", i64  %"back1##0", i64*  %"result1##0", i64  %"front2##0", i64  %"back2##0", i64*  %"result2##0")    {
entry:
  %0 = icmp ne i64 %"front1##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"front1##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"front1##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = icmp ne i64 %"front2##0", 0 
  br i1 %8, label %if.then1, label %if.else1 
if.else:
  %27 = icmp ne i64 %"front2##0", 0 
  br i1 %27, label %if.then2, label %if.else2 
if.then1:
  %9 = inttoptr i64 %"front2##0" to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"front2##0", 8 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = inttoptr i64 %"front2##0" to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  store  i64 %3, i64* %17 
  %18 = inttoptr i64 %"front1##0" to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  store  i64 %11, i64* %19 
  %20 = add   i64 %"front2##0", 8 
  %21 = inttoptr i64 %20 to i64* 
  store  i64 %"front2##0", i64* %"result1##0" 
  %22 = add   i64 %"front1##0", 8 
  %23 = inttoptr i64 %22 to i64* 
  store  i64 %"front1##0", i64* %"result2##0" 
  musttail call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c]"(i64  %7, i64  %"back1##0", i64*  %21, i64  %15, i64  %"back2##0", i64*  %23)  
  ret void 
if.else1:
  store  i64 %"back2##0", i64* %"result2##0" 
  %24 = add   i64 %"front1##0", 8 
  %25 = inttoptr i64 %24 to i64* 
  store  i64 %"front1##0", i64* %"result1##0" 
  %26 = alloca i64 
   call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c]"(i64  %7, i64  %"back1##0", i64*  %25, i64  0, i64  0, i64*  %26)  
  ret void 
if.then2:
  %28 = add   i64 %"front2##0", 8 
  %29 = inttoptr i64 %28 to i64* 
  %30 = getelementptr  i64, i64* %29, i64 0 
  %31 = load  i64, i64* %30 
  store  i64 %"back1##0", i64* %"result1##0" 
  %32 = add   i64 %"front2##0", 8 
  %33 = inttoptr i64 %32 to i64* 
  store  i64 %"front2##0", i64* %"result2##0" 
  %34 = alloca i64 
   call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c]"(i64  0, i64  0, i64*  %34, i64  %31, i64  %"back2##0", i64*  %33)  
  ret void 
if.else2:
  store  i64 %"back1##0", i64* %"result1##0" 
  store  i64 %"back2##0", i64* %"result2##0" 
  ret void 
}


define external fastcc  void @"tcmc_multiple_outputs.appendtwice<0>[3869c8b78e]"(i64  %"front1##0", i64  %"back1##0", i64*  %"result1##0", i64  %"front2##0", i64  %"back2##0", i64*  %"result2##0")    {
entry:
  %0 = icmp ne i64 %"front1##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"front1##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"front1##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = icmp ne i64 %"front2##0", 0 
  br i1 %8, label %if.then1, label %if.else1 
if.else:
  %35 = icmp ne i64 %"front2##0", 0 
  br i1 %35, label %if.then2, label %if.else2 
if.then1:
  %9 = inttoptr i64 %"front2##0" to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"front2##0", 8 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = inttoptr i64 %"front2##0" to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  store  i64 %3, i64* %17 
  %18 = trunc i64 16 to i32  
  %19 = tail call ccc  i8*  @wybe_malloc(i32  %18)  
  %20 = ptrtoint i8* %19 to i64 
  %21 = inttoptr i64 %20 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  store  i64 %11, i64* %22 
  %23 = add   i64 %"front2##0", 8 
  %24 = inttoptr i64 %23 to i64* 
  store  i64 %"front2##0", i64* %"result1##0" 
  %25 = add   i64 %20, 8 
  %26 = inttoptr i64 %25 to i64* 
  store  i64 %20, i64* %"result2##0" 
  musttail call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>[3869c8b78e]"(i64  %7, i64  %"back1##0", i64*  %24, i64  %15, i64  %"back2##0", i64*  %26)  
  ret void 
if.else1:
  %27 = trunc i64 16 to i32  
  %28 = tail call ccc  i8*  @wybe_malloc(i32  %27)  
  %29 = ptrtoint i8* %28 to i64 
  %30 = inttoptr i64 %29 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  store  i64 %3, i64* %31 
  store  i64 %"back2##0", i64* %"result2##0" 
  %32 = add   i64 %29, 8 
  %33 = inttoptr i64 %32 to i64* 
  store  i64 %29, i64* %"result1##0" 
  %34 = alloca i64 
   call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>[3869c8b78e]"(i64  %7, i64  %"back1##0", i64*  %33, i64  0, i64  0, i64*  %34)  
  ret void 
if.then2:
  %36 = add   i64 %"front2##0", 8 
  %37 = inttoptr i64 %36 to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  %39 = load  i64, i64* %38 
  store  i64 %"back1##0", i64* %"result1##0" 
  %40 = add   i64 %"front2##0", 8 
  %41 = inttoptr i64 %40 to i64* 
  store  i64 %"front2##0", i64* %"result2##0" 
  %42 = alloca i64 
   call fastcc  void  @"tcmc_multiple_outputs.appendtwice<0>[d4b0b4930c]"(i64  0, i64  0, i64*  %42, i64  %39, i64  %"back2##0", i64*  %41)  
  ret void 
if.else2:
  store  i64 %"back1##0", i64* %"result1##0" 
  store  i64 %"back2##0", i64* %"result2##0" 
  ret void 
}


define external fastcc  void @"tcmc_multiple_outputs.gen#1<0>"(i64  %"#env##0", i64  %"x##0")    {
entry:
  tail call ccc  void  @print_int(i64  %"x##0")  
  ret void 
}
