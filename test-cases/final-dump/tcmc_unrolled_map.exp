======================================================================
AFTER EVERYTHING:
 Module tcmc_unrolled_map
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : tcmc_unrolled_map.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: tcmc_unrolled_map.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(6,(tcmc_unrolled_map.map2<0>,fromList [NonAliasedParamCond 1 []]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#10##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#10##0:wybe.list(T), ?tmp#11##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 5:T) @list:nn:nn
    foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?tmp#5##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#14##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#14##0:wybe.list(T), ?tmp#15##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#4##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#18##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#18##0:wybe.list(T), ?tmp#19##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#4##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#22##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#22##0:wybe.list(T), ?tmp#23##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#26##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#26##0:wybe.list(T), ?tmp#27##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#27##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    tcmc_unrolled_map.map2<0>[6dacb8fd25](tcmc_unrolled_map.gen#1<1><>:(wybe.int, ?wybe.int), ~tmp#1##0:wybe.list(wybe.int), outByReference y##0:wybe.list(wybe.int)) #6 @tcmc_unrolled_map:nn:nn
    wybe.list.println<0>(~y##0:wybe.list(wybe.int), tcmc_unrolled_map.gen#2<0><>:{resource}(wybe.int))<Everything; Everything> #7 @tcmc_unrolled_map:nn:nn


gen#1 > {inline} (1 calls)
0: tcmc_unrolled_map.gen#1<0>
gen#1(anon#1#1##0:wybe.int, ?anon#1#2##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~anon#1#1##0:wybe.int, 1:wybe.int, ?anon#1#2##0:wybe.int) @int:nn:nn
gen#1 > {inline} (1 calls)
1: tcmc_unrolled_map.gen#1<1>
gen#1(anon#1#1##0:wybe.int, ?anon#1#2##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm add(~anon#1#1##0:wybe.int, 1:wybe.int, ?anon#1#2##0:wybe.int) @int:nn:nn


gen#2 > {inline} (1 calls)
0: tcmc_unrolled_map.gen#2<0>
gen#2(x##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~x##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn


map2 > (2 calls)
0: tcmc_unrolled_map.map2<0>[6dacb8fd25]
map2(f##0:(T, ?K), x##0:wybe.list(T), outByReference #result##0:wybe.list(K))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 1]
  MultiSpeczDepInfo: [(4,(tcmc_unrolled_map.map2<0>,fromList [NonAliasedParamCond 1 [1]]))]
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.bool)
    case ~tmp#14##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.list(K), ?#result##0:wybe.list(K)) @tcmc_unrolled_map:nn:nn

    1:
        foreign lpvm access(x##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x0##0:T) @list:nn:nn
        foreign lpvm access(~x##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?xt1##0:wybe.list(T)) @list:nn:nn
        foreign llvm icmp_ne(xt1##0:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.bool)
        case ~tmp#16##0:wybe.bool of
        0:
            ~f##0:(T, ?K)(~x0##0:T, ?tmp#8##0:K) #7 @tcmc_unrolled_map:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#8##0:T) @list:nn:nn
            foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?#result##0:wybe.list(K), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn

        1:
            foreign lpvm access(xt1##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x1##0:T) @list:nn:nn
            foreign lpvm access(~xt1##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?xt2##0:wybe.list(T)) @list:nn:nn
            f##0:(T, ?K)(~x0##0:T, ?tmp#3##0:K) #2 @tcmc_unrolled_map:nn:nn
            f##0:(T, ?K)(~x1##0:T, ?tmp#5##0:K) #3 @tcmc_unrolled_map:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:T) @list:nn:nn
            foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:T) @list:nn:nn
            tcmc_unrolled_map.map2<0>(~f##0:(T, ?K), ~xt2##0:wybe.list(T), outByReference tmp#6##0:wybe.list(K)) #4 @tcmc_unrolled_map:nn:nn
            foreign lpvm mutate(~tmp#20##0:wybe.list(T), outByReference tmp#4##0:wybe.list(K), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#6##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?#result##0:wybe.list(K), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#4##0:wybe.list(T)) @list:nn:nn


 [6dacb8fd25] [NonAliasedParam 1] :
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.bool)
    case ~tmp#14##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.list(K), ?#result##0:wybe.list(K)) @tcmc_unrolled_map:nn:nn

    1:
        foreign lpvm access(x##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x0##0:T) @list:nn:nn
        foreign lpvm access(x##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?xt1##0:wybe.list(T)) @list:nn:nn
        foreign llvm icmp_ne(xt1##0:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.bool)
        case ~tmp#16##0:wybe.bool of
        0:
            ~f##0:(T, ?K)(~x0##0:T, ?tmp#8##0:K) #7 @tcmc_unrolled_map:nn:nn
            foreign lpvm mutate(~x##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#8##0:T) @list:nn:nn
            foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?#result##0:wybe.list(K), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn

        1:
            foreign lpvm access(xt1##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x1##0:T) @list:nn:nn
            foreign lpvm access(xt1##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?xt2##0:wybe.list(T)) @list:nn:nn
            f##0:(T, ?K)(~x0##0:T, ?tmp#3##0:K) #2 @tcmc_unrolled_map:nn:nn
            f##0:(T, ?K)(~x1##0:T, ?tmp#5##0:K) #3 @tcmc_unrolled_map:nn:nn
            foreign lpvm mutate(~xt1##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:T) @list:nn:nn
            foreign lpvm mutate(~x##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:T) @list:nn:nn
            tcmc_unrolled_map.map2<0>[6dacb8fd25](~f##0:(T, ?K), ~xt2##0:wybe.list(T), outByReference tmp#6##0:wybe.list(K)) #4 @tcmc_unrolled_map:nn:nn
            foreign lpvm mutate(~tmp#20##0:wybe.list(T), outByReference tmp#4##0:wybe.list(K), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#6##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?#result##0:wybe.list(K), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tmp#4##0:wybe.list(T)) @list:nn:nn



  LLVM code       :

; ModuleID = 'tcmc_unrolled_map'


 


@tcmc_unrolled_map.1 =    constant [1 x i64] [i64 ptrtoint (void (i64, i64)* @"tcmc_unrolled_map.gen#2<0>" to i64)]


@tcmc_unrolled_map.0 =    constant [1 x i64] [i64 ptrtoint (i64 (i64, i64)* @"tcmc_unrolled_map.gen#1<1>" to i64)]


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.list.println<0>"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"tcmc_unrolled_map.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 5, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 0, i64* %7 
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 4, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 %2, i64* %15 
  %16 = trunc i64 16 to i32  
  %17 = tail call ccc  i8*  @wybe_malloc(i32  %16)  
  %18 = ptrtoint i8* %17 to i64 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 3, i64* %20 
  %21 = add   i64 %18, 8 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 %10, i64* %23 
  %24 = trunc i64 16 to i32  
  %25 = tail call ccc  i8*  @wybe_malloc(i32  %24)  
  %26 = ptrtoint i8* %25 to i64 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  store  i64 2, i64* %28 
  %29 = add   i64 %26, 8 
  %30 = inttoptr i64 %29 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  store  i64 %18, i64* %31 
  %32 = trunc i64 16 to i32  
  %33 = tail call ccc  i8*  @wybe_malloc(i32  %32)  
  %34 = ptrtoint i8* %33 to i64 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  store  i64 1, i64* %36 
  %37 = add   i64 %34, 8 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  store  i64 %26, i64* %39 
  %40 = alloca i64 
   call fastcc  void  @"tcmc_unrolled_map.map2<0>[6dacb8fd25]"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @tcmc_unrolled_map.0, i32 0, i32 0) to i64), i64  %34, i64*  %40)  
  %41 = load  i64, i64* %40 
  tail call fastcc  void  @"wybe.list.println<0>"(i64  %41, i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @tcmc_unrolled_map.1, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  i64 @"tcmc_unrolled_map.gen#1<0>"(i64  %"anon#1#1##0")    {
entry:
  %0 = add   i64 %"anon#1#1##0", 1 
  ret i64 %0 
}


define external fastcc  i64 @"tcmc_unrolled_map.gen#1<1>"(i64  %"#env##0", i64  %"anon#1#1##0")    {
entry:
  %0 = add   i64 %"anon#1#1##0", 1 
  ret i64 %0 
}


define external fastcc  void @"tcmc_unrolled_map.gen#2<0>"(i64  %"#env##0", i64  %"x##0")    {
entry:
  tail call ccc  void  @print_int(i64  %"x##0")  
  ret void 
}


define external fastcc  void @"tcmc_unrolled_map.map2<0>"(i64  %"f##0", i64  %"x##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"x##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"x##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = icmp ne i64 %7, 0 
  br i1 %8, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  %9 = inttoptr i64 %7 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %7, 8 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = inttoptr i64 %"f##0" to i64* 
  %17 = load  i64, i64* %16 
  %18 = inttoptr i64 %17 to i64 (i64, i64)* 
  %19 = tail call fastcc  i64  %18(i64  %"f##0", i64  %3)  
  %20 = inttoptr i64 %"f##0" to i64* 
  %21 = load  i64, i64* %20 
  %22 = inttoptr i64 %21 to i64 (i64, i64)* 
  %23 = tail call fastcc  i64  %22(i64  %"f##0", i64  %11)  
  %24 = trunc i64 16 to i32  
  %25 = tail call ccc  i8*  @wybe_malloc(i32  %24)  
  %26 = ptrtoint i8* %25 to i64 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  store  i64 %23, i64* %28 
  %29 = trunc i64 16 to i32  
  %30 = tail call ccc  i8*  @wybe_malloc(i32  %29)  
  %31 = ptrtoint i8* %30 to i64 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  store  i64 %19, i64* %33 
  %34 = add   i64 %31, 8 
  %35 = inttoptr i64 %34 to i64* 
  store  i64 %31, i64* %"#result##0" 
  %36 = add   i64 %26, 8 
  %37 = inttoptr i64 %36 to i64* 
  store  i64 %26, i64* %35 
  musttail call fastcc  void  @"tcmc_unrolled_map.map2<0>"(i64  %"f##0", i64  %15, i64*  %37)  
  ret void 
if.else1:
  %38 = inttoptr i64 %"f##0" to i64* 
  %39 = load  i64, i64* %38 
  %40 = inttoptr i64 %39 to i64 (i64, i64)* 
  %41 = tail call fastcc  i64  %40(i64  %"f##0", i64  %3)  
  %42 = trunc i64 16 to i32  
  %43 = tail call ccc  i8*  @wybe_malloc(i32  %42)  
  %44 = ptrtoint i8* %43 to i64 
  %45 = inttoptr i64 %44 to i64* 
  %46 = getelementptr  i64, i64* %45, i64 0 
  store  i64 %41, i64* %46 
  %47 = add   i64 %44, 8 
  %48 = inttoptr i64 %47 to i64* 
  %49 = getelementptr  i64, i64* %48, i64 0 
  store  i64 0, i64* %49 
  store  i64 %44, i64* %"#result##0" 
  ret void 
}


define external fastcc  void @"tcmc_unrolled_map.map2<0>[6dacb8fd25]"(i64  %"f##0", i64  %"x##0", i64*  %"#result##0")    {
entry:
  %0 = icmp ne i64 %"x##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"x##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"x##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = icmp ne i64 %7, 0 
  br i1 %8, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"#result##0" 
  ret void 
if.then1:
  %9 = inttoptr i64 %7 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %7, 8 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = inttoptr i64 %"f##0" to i64* 
  %17 = load  i64, i64* %16 
  %18 = inttoptr i64 %17 to i64 (i64, i64)* 
  %19 = tail call fastcc  i64  %18(i64  %"f##0", i64  %3)  
  %20 = inttoptr i64 %"f##0" to i64* 
  %21 = load  i64, i64* %20 
  %22 = inttoptr i64 %21 to i64 (i64, i64)* 
  %23 = tail call fastcc  i64  %22(i64  %"f##0", i64  %11)  
  %24 = inttoptr i64 %7 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  store  i64 %23, i64* %25 
  %26 = inttoptr i64 %"x##0" to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  store  i64 %19, i64* %27 
  %28 = add   i64 %"x##0", 8 
  %29 = inttoptr i64 %28 to i64* 
  store  i64 %"x##0", i64* %"#result##0" 
  %30 = add   i64 %7, 8 
  %31 = inttoptr i64 %30 to i64* 
  store  i64 %7, i64* %29 
  musttail call fastcc  void  @"tcmc_unrolled_map.map2<0>[6dacb8fd25]"(i64  %"f##0", i64  %15, i64*  %31)  
  ret void 
if.else1:
  %32 = inttoptr i64 %"f##0" to i64* 
  %33 = load  i64, i64* %32 
  %34 = inttoptr i64 %33 to i64 (i64, i64)* 
  %35 = tail call fastcc  i64  %34(i64  %"f##0", i64  %3)  
  %36 = inttoptr i64 %"x##0" to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  store  i64 %35, i64* %37 
  %38 = add   i64 %"x##0", 8 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  store  i64 0, i64* %40 
  store  i64 %"x##0", i64* %"#result##0" 
  ret void 
}
