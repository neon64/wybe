======================================================================
AFTER EVERYTHING:
 Module tcmc_partition
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : tcmc_partition.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: tcmc_partition.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(10,(tcmc_partition.partition<0>,fromList [NonAliasedParamCond 1 []]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#14##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#14##0:wybe.list(T), ?tmp#15##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 7:T) @list:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#7##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#18##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#18##0:wybe.list(T), ?tmp#19##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 6:T) @list:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#6##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#7##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#22##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#22##0:wybe.list(T), ?tmp#23##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 5:T) @list:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#5##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#26##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#26##0:wybe.list(T), ?tmp#27##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#27##0:wybe.list(T), ?tmp#4##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#30##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#30##0:wybe.list(T), ?tmp#31##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#31##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#4##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#34##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#34##0:wybe.list(T), ?tmp#35##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 9:T) @list:nn:nn
    foreign lpvm mutate(~tmp#35##0:wybe.list(T), ?tmp#2##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#38##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#38##0:wybe.list(T), ?tmp#39##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#39##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#2##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#42##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#42##0:wybe.list(T), ?tmp#43##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#43##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.list(T)) @list:nn:nn
    wybe.list.println<0>(tmp#0##0:wybe.list(wybe.int), tcmc_partition.gen#1<0><>:{resource}(wybe.int))<Everything; Everything> #9 @tcmc_partition:nn:nn
    tcmc_partition.partition<0>[6dacb8fd25](tcmc_partition.gen#2<1><>:(wybe.int, ?wybe.bool), ~tmp#0##0:wybe.list(wybe.int), outByReference yes##0:wybe.list(wybe.int), outByReference no##0:wybe.list(wybe.int)) #10 @tcmc_partition:nn:nn
    wybe.string.print<0>("[":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #15 @list:nn:nn
    wybe.list._print_list<0>(~yes##0:wybe.list(T), tcmc_partition.gen#1<0><>:{resource}(T))<Everything; Everything> #16 @list:nn:nn
    wybe.string.print<0>("]":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #17 @list:nn:nn
    wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #12 @tcmc_partition:nn:nn
    wybe.string.print<0>("[":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #18 @list:nn:nn
    wybe.list._print_list<0>(~no##0:wybe.list(T), tcmc_partition.gen#1<0><>:{resource}(T))<Everything; Everything> #19 @list:nn:nn
    wybe.string.print<0>("]":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #20 @list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#48##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#48##0:wybe.phantom, ?tmp#49##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#49##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


gen#1 > {inline} (3 calls)
0: tcmc_partition.gen#1<0>
gen#1(x##0:wybe.int)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#1##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~x##0:wybe.int, ~tmp#1##0:wybe.phantom, ?tmp#2##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#2##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn


gen#2 > {inline} (1 calls)
0: tcmc_partition.gen#2<0>
gen#2(anon#1#1##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sge(~anon#1#1##0:wybe.int, 3:wybe.int, ?#success##0:wybe.bool) @int:nn:nn
gen#2 > {inline} (1 calls)
1: tcmc_partition.gen#2<1>
gen#2(anon#1#1##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_sge(~anon#1#1##0:wybe.int, 3:wybe.int, ?#success##0:wybe.bool) @int:nn:nn


partition > (3 calls)
0: tcmc_partition.partition<0>[6dacb8fd25]
partition(p##0:(T, ?wybe.bool), l##0:wybe.list(T), outByReference yes##0:wybe.list(T), outByReference no##0:wybe.list(T))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 1]
  MultiSpeczDepInfo: [(2,(tcmc_partition.partition<0>,fromList [NonAliasedParamCond 1 [1]])),(4,(tcmc_partition.partition<0>,fromList [NonAliasedParamCond 1 [1]]))]
    foreign llvm icmp_ne(l##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.list(T), ?yes##0:wybe.list(T)) @tcmc_partition:nn:nn
        foreign llvm move(0:wybe.list(T), ?no##0:wybe.list(T)) @tcmc_partition:nn:nn

    1:
        foreign lpvm access(l##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @list:nn:nn
        foreign lpvm access(~l##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(T)) @list:nn:nn
        p##0:(T, ?wybe.bool)(h##0:T, ?tmp#4##0:wybe.bool) #1 @tcmc_partition:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            foreign lpvm alloc(16:wybe.int, ?tmp#10##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#10##0:wybe.list(T), ?tmp#11##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @list:nn:nn
            tcmc_partition.partition<0>(~p##0:(T, ?wybe.bool), ~t##0:wybe.list(T), outByReference yes##0:wybe.list(T), outByReference no0##0:wybe.list(T)) #4 @tcmc_partition:nn:nn
            foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?no##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference no0##0:wybe.list(T)) @list:nn:nn

        1:
            foreign lpvm alloc(16:wybe.int, ?tmp#10##0:wybe.list(T)) @list:nn:nn
            foreign lpvm mutate(~tmp#10##0:wybe.list(T), ?tmp#11##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @list:nn:nn
            tcmc_partition.partition<0>(~p##0:(T, ?wybe.bool), ~t##0:wybe.list(T), outByReference yes0##0:wybe.list(T), outByReference no##0:wybe.list(T)) #2 @tcmc_partition:nn:nn
            foreign lpvm mutate(~tmp#11##0:wybe.list(T), ?yes##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference yes0##0:wybe.list(T)) @list:nn:nn


 [6dacb8fd25] [NonAliasedParam 1] :
    foreign llvm icmp_ne(l##0:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.bool)
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.list(T), ?yes##0:wybe.list(T)) @tcmc_partition:nn:nn
        foreign llvm move(0:wybe.list(T), ?no##0:wybe.list(T)) @tcmc_partition:nn:nn

    1:
        foreign lpvm access(l##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:T) @list:nn:nn
        foreign lpvm access(l##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(T)) @list:nn:nn
        p##0:(T, ?wybe.bool)(~h##0:T, ?tmp#4##0:wybe.bool) #1 @tcmc_partition:nn:nn
        case ~tmp#4##0:wybe.bool of
        0:
            tcmc_partition.partition<0>[6dacb8fd25](~p##0:(T, ?wybe.bool), ~t##0:wybe.list(T), outByReference yes##0:wybe.list(T), outByReference no0##0:wybe.list(T)) #4 @tcmc_partition:nn:nn
            foreign lpvm mutate(~l##0:wybe.list(T), ?no##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference no0##0:wybe.list(T)) @list:nn:nn

        1:
            tcmc_partition.partition<0>[6dacb8fd25](~p##0:(T, ?wybe.bool), ~t##0:wybe.list(T), outByReference yes0##0:wybe.list(T), outByReference no##0:wybe.list(T)) #2 @tcmc_partition:nn:nn
            foreign lpvm mutate(~l##0:wybe.list(T), ?yes##0:wybe.list(T), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference yes0##0:wybe.list(T)) @list:nn:nn



  LLVM code       :

; ModuleID = 'tcmc_partition'


 


@tcmc_partition.3 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @tcmc_partition.2 to i64) }


@tcmc_partition.5 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @tcmc_partition.4 to i64) }


@tcmc_partition.7 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @tcmc_partition.6 to i64) }


@tcmc_partition.6 =    constant [?? x i8] c", \00"


@tcmc_partition.2 =    constant [?? x i8] c"[\00"


@tcmc_partition.4 =    constant [?? x i8] c"]\00"


@tcmc_partition.0 =    constant [1 x i64] [i64 ptrtoint (void (i64, i64)* @"tcmc_partition.gen#1<0>" to i64)]


@tcmc_partition.1 =    constant [1 x i64] [i64 ptrtoint (i64 (i64, i64)* @"tcmc_partition.gen#2<1>" to i64)]


declare external ccc  void @print_int(i64)    


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external fastcc  void @"wybe.list._print_list<0>"(i64, i64)    


declare external fastcc  void @"wybe.list.println<0>"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"tcmc_partition.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 7, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 0, i64* %7 
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 6, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 %2, i64* %15 
  %16 = trunc i64 16 to i32  
  %17 = tail call ccc  i8*  @wybe_malloc(i32  %16)  
  %18 = ptrtoint i8* %17 to i64 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 5, i64* %20 
  %21 = add   i64 %18, 8 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 %10, i64* %23 
  %24 = trunc i64 16 to i32  
  %25 = tail call ccc  i8*  @wybe_malloc(i32  %24)  
  %26 = ptrtoint i8* %25 to i64 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  store  i64 4, i64* %28 
  %29 = add   i64 %26, 8 
  %30 = inttoptr i64 %29 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  store  i64 %18, i64* %31 
  %32 = trunc i64 16 to i32  
  %33 = tail call ccc  i8*  @wybe_malloc(i32  %32)  
  %34 = ptrtoint i8* %33 to i64 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  store  i64 3, i64* %36 
  %37 = add   i64 %34, 8 
  %38 = inttoptr i64 %37 to i64* 
  %39 = getelementptr  i64, i64* %38, i64 0 
  store  i64 %26, i64* %39 
  %40 = trunc i64 16 to i32  
  %41 = tail call ccc  i8*  @wybe_malloc(i32  %40)  
  %42 = ptrtoint i8* %41 to i64 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  store  i64 9, i64* %44 
  %45 = add   i64 %42, 8 
  %46 = inttoptr i64 %45 to i64* 
  %47 = getelementptr  i64, i64* %46, i64 0 
  store  i64 %34, i64* %47 
  %48 = trunc i64 16 to i32  
  %49 = tail call ccc  i8*  @wybe_malloc(i32  %48)  
  %50 = ptrtoint i8* %49 to i64 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  store  i64 2, i64* %52 
  %53 = add   i64 %50, 8 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  store  i64 %42, i64* %55 
  %56 = trunc i64 16 to i32  
  %57 = tail call ccc  i8*  @wybe_malloc(i32  %56)  
  %58 = ptrtoint i8* %57 to i64 
  %59 = inttoptr i64 %58 to i64* 
  %60 = getelementptr  i64, i64* %59, i64 0 
  store  i64 1, i64* %60 
  %61 = add   i64 %58, 8 
  %62 = inttoptr i64 %61 to i64* 
  %63 = getelementptr  i64, i64* %62, i64 0 
  store  i64 %50, i64* %63 
  tail call fastcc  void  @"wybe.list.println<0>"(i64  %58, i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @tcmc_partition.0, i32 0, i32 0) to i64))  
  %64 = alloca i64 
  %65 = alloca i64 
   call fastcc  void  @"tcmc_partition.partition<0>[6dacb8fd25]"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @tcmc_partition.1, i32 0, i32 0) to i64), i64  %58, i64*  %64, i64*  %65)  
  %66 = load  i64, i64* %64 
  %67 = load  i64, i64* %65 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @tcmc_partition.3, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.list._print_list<0>"(i64  %66, i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @tcmc_partition.0, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @tcmc_partition.5, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @tcmc_partition.7, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @tcmc_partition.3, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.list._print_list<0>"(i64  %67, i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @tcmc_partition.0, i32 0, i32 0) to i64))  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @tcmc_partition.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"tcmc_partition.gen#1<0>"(i64  %"#env##0", i64  %"x##0")    {
entry:
  tail call ccc  void  @print_int(i64  %"x##0")  
  ret void 
}


define external fastcc  i1 @"tcmc_partition.gen#2<0>"(i64  %"anon#1#1##0")    {
entry:
  %0 = icmp sge i64 %"anon#1#1##0", 3 
  ret i1 %0 
}


define external fastcc  i64 @"tcmc_partition.gen#2<1>"(i64  %"#env##0", i64  %"anon#1#1##0")    {
entry:
  %0 = icmp sge i64 %"anon#1#1##0", 3 
  %1 = zext i1 %0 to i64  
  ret i64 %1 
}


define external fastcc  void @"tcmc_partition.partition<0>"(i64  %"p##0", i64  %"l##0", i64*  %"yes##0", i64*  %"no##0")    {
entry:
  %0 = icmp ne i64 %"l##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"l##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"l##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"p##0" to i64* 
  %9 = load  i64, i64* %8 
  %10 = inttoptr i64 %9 to i64 (i64, i64)* 
  %11 = tail call fastcc  i64  %10(i64  %"p##0", i64  %3)  
  %12 = trunc i64 %11 to i1  
  br i1 %12, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"yes##0" 
  store  i64 0, i64* %"no##0" 
  ret void 
if.then1:
  %13 = trunc i64 16 to i32  
  %14 = tail call ccc  i8*  @wybe_malloc(i32  %13)  
  %15 = ptrtoint i8* %14 to i64 
  %16 = inttoptr i64 %15 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  store  i64 %3, i64* %17 
  %18 = add   i64 %15, 8 
  %19 = inttoptr i64 %18 to i64* 
  store  i64 %15, i64* %"yes##0" 
  musttail call fastcc  void  @"tcmc_partition.partition<0>"(i64  %"p##0", i64  %7, i64*  %19, i64*  %"no##0")  
  ret void 
if.else1:
  %20 = trunc i64 16 to i32  
  %21 = tail call ccc  i8*  @wybe_malloc(i32  %20)  
  %22 = ptrtoint i8* %21 to i64 
  %23 = inttoptr i64 %22 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  store  i64 %3, i64* %24 
  %25 = add   i64 %22, 8 
  %26 = inttoptr i64 %25 to i64* 
  store  i64 %22, i64* %"no##0" 
  musttail call fastcc  void  @"tcmc_partition.partition<0>"(i64  %"p##0", i64  %7, i64*  %"yes##0", i64*  %26)  
  ret void 
}


define external fastcc  void @"tcmc_partition.partition<0>[6dacb8fd25]"(i64  %"p##0", i64  %"l##0", i64*  %"yes##0", i64*  %"no##0")    {
entry:
  %0 = icmp ne i64 %"l##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  %1 = inttoptr i64 %"l##0" to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"l##0", 8 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = inttoptr i64 %"p##0" to i64* 
  %9 = load  i64, i64* %8 
  %10 = inttoptr i64 %9 to i64 (i64, i64)* 
  %11 = tail call fastcc  i64  %10(i64  %"p##0", i64  %3)  
  %12 = trunc i64 %11 to i1  
  br i1 %12, label %if.then1, label %if.else1 
if.else:
  store  i64 0, i64* %"yes##0" 
  store  i64 0, i64* %"no##0" 
  ret void 
if.then1:
  %13 = add   i64 %"l##0", 8 
  %14 = inttoptr i64 %13 to i64* 
  store  i64 %"l##0", i64* %"yes##0" 
  musttail call fastcc  void  @"tcmc_partition.partition<0>[6dacb8fd25]"(i64  %"p##0", i64  %7, i64*  %14, i64*  %"no##0")  
  ret void 
if.else1:
  %15 = add   i64 %"l##0", 8 
  %16 = inttoptr i64 %15 to i64* 
  store  i64 %"l##0", i64* %"no##0" 
  musttail call fastcc  void  @"tcmc_partition.partition<0>[6dacb8fd25]"(i64  %"p##0", i64  %7, i64*  %"yes##0", i64*  %16)  
  ret void 
}
