======================================================================
AFTER EVERYTHING:
 Module higher_order_append
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : higher_order_append.<0>
  imports         : use wybe
  resources       : 
  procs           : 

module top-level code > public {impure} (0 calls)
0: higher_order_append.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#15##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#15##0:wybe.list(T), ?tmp#16##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:T) @list:nn:nn
    foreign lpvm mutate(~tmp#16##0:wybe.list(T), ?tmp#1##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#19##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#19##0:wybe.list(T), ?tmp#20##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:T) @list:nn:nn
    foreign lpvm mutate(~tmp#20##0:wybe.list(T), ?tmp#4##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#23##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#23##0:wybe.list(T), ?tmp#24##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:T) @list:nn:nn
    foreign lpvm mutate(~tmp#24##0:wybe.list(T), ?tmp#7##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#27##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#27##0:wybe.list(T), ?tmp#28##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#7##0:T) @list:nn:nn
    foreign lpvm mutate(~tmp#28##0:wybe.list(T), ?tmp#6##0:wybe.list(wybe.list(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#31##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#31##0:wybe.list(T), ?tmp#32##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#4##0:T) @list:nn:nn
    foreign lpvm mutate(~tmp#32##0:wybe.list(T), ?tmp#3##0:wybe.list(wybe.list(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#35##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#35##0:wybe.list(T), ?tmp#36##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:T) @list:nn:nn
    foreign lpvm mutate(~tmp#36##0:wybe.list(T), ?tmp#0##0:wybe.list(wybe.list(wybe.int)), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#3##0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#39##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#39##0:wybe.list(T), ?tmp#40##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 6:T) @list:nn:nn
    foreign lpvm mutate(~tmp#40##0:wybe.list(T), ?tmp#11##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.list(T)) @list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#43##0:wybe.list(T)) @list:nn:nn
    foreign lpvm mutate(~tmp#43##0:wybe.list(T), ?tmp#44##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 4:T) @list:nn:nn
    foreign lpvm mutate(~tmp#44##0:wybe.list(T), ?tmp#10##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#11##0:wybe.list(T)) @list:nn:nn
    wybe.list.map<1>(higher_order_append.gen#1<1><tmp#10##0:wybe.list(wybe.int)>:(wybe.list(wybe.int), ?wybe.list(wybe.int)), tmp#0##0:wybe.list(wybe.list(wybe.int)), outByReference y##0:wybe.list(wybe.list(wybe.int))) #13 @higher_order_append:nn:nn
    wybe.list.println<1>(~tmp#0##0:wybe.list(wybe.list(wybe.int)))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #14 @higher_order_append:nn:nn
    wybe.list.println<1>(~y##0:wybe.list(wybe.list(wybe.int)))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #15 @higher_order_append:nn:nn


append > (2 calls)
0: higher_order_append.append<0>
append(front##0:wybe.list(wybe.int), back##0:wybe.list(wybe.int), outByReference result##0:wybe.list(wybe.int))<{}; {}>:
  AliasPairs: [(back##0,result##0)]
  InterestingCallProperties: [InterestingUnaliased 0]
  MultiSpeczDepInfo: [(1,(higher_order_append.append<0>,fromList [NonAliasedParamCond 0 [0]]))]
    foreign llvm icmp_ne(front##0:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.bool)
    case ~tmp#3##0:wybe.bool of
    0:
        foreign llvm move(~back##0:wybe.list(wybe.int), ?result##0:wybe.list(wybe.int)) @higher_order_append:nn:nn

    1:
        foreign lpvm access(front##0:wybe.list(T), 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @list:nn:nn
        foreign lpvm access(~front##0:wybe.list(T), 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:wybe.list(wybe.int)) @list:nn:nn
        foreign lpvm alloc(16:wybe.int, ?tmp#6##0:wybe.list(T)) @list:nn:nn
        foreign lpvm mutate(~tmp#6##0:wybe.list(T), ?tmp#7##0:wybe.list(T), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~h##0:T) @list:nn:nn
        higher_order_append.append<0>(~t##0:wybe.list(wybe.int), ~back##0:wybe.list(wybe.int), outByReference tail##0:wybe.list(wybe.int)) #1 @higher_order_append:nn:nn
        foreign lpvm mutate(~tmp#7##0:wybe.list(T), ?result##0:wybe.list(wybe.int), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~takeReference tail##0:wybe.list(T)) @list:nn:nn



gen#1 > {inline} (1 calls)
0: higher_order_append.gen#1<0>
gen#1(^cons##0:wybe.list(wybe.int), anon#1#1##0:wybe.list(wybe.int), ?anon#1#2##0:wybe.list(wybe.int))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    higher_order_append.append<0>(~anon#1#1##0:wybe.list(wybe.int), ~cons##0:wybe.list(wybe.int), outByReference anon#1#2##0:wybe.list(wybe.int)) #0 @higher_order_append:nn:nn
gen#1 > {inline} (1 calls)
1: higher_order_append.gen#1<1>
gen#1(^cons##0:wybe.list(wybe.int), anon#1#1##0:wybe.list(wybe.int), ?anon#1#2##0:wybe.list(wybe.int))<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    higher_order_append.append<0>(~anon#1#1##0:wybe.list(wybe.int), ~^cons##0:wybe.list(wybe.int), outByReference anon#1#2##0:wybe.list(wybe.int)) #1 @higher_order_append:nn:nn

  LLVM code       :

; ModuleID = 'higher_order_append'


 


declare external fastcc  void @"wybe.list.println<1>"(i64)    


declare external fastcc  void @"wybe.list.map<1>"(i64, i64, i64*)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"higher_order_append.<0>"()    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 1, i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 0, i64* %8 
  %9 = trunc i64 16 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  store  i64 2, i64* %13 
  %14 = add   i64 %11, 8 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 0, i64* %16 
  %17 = trunc i64 16 to i32  
  %18 = tail call ccc  i8*  @wybe_malloc(i32  %17)  
  %19 = ptrtoint i8* %18 to i64 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  store  i64 3, i64* %21 
  %22 = add   i64 %19, 8 
  %23 = inttoptr i64 %22 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  store  i64 0, i64* %24 
  %25 = trunc i64 16 to i32  
  %26 = tail call ccc  i8*  @wybe_malloc(i32  %25)  
  %27 = ptrtoint i8* %26 to i64 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  store  i64 %19, i64* %29 
  %30 = add   i64 %27, 8 
  %31 = inttoptr i64 %30 to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  store  i64 0, i64* %32 
  %33 = trunc i64 16 to i32  
  %34 = tail call ccc  i8*  @wybe_malloc(i32  %33)  
  %35 = ptrtoint i8* %34 to i64 
  %36 = inttoptr i64 %35 to i64* 
  %37 = getelementptr  i64, i64* %36, i64 0 
  store  i64 %11, i64* %37 
  %38 = add   i64 %35, 8 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  store  i64 %27, i64* %40 
  %41 = trunc i64 16 to i32  
  %42 = tail call ccc  i8*  @wybe_malloc(i32  %41)  
  %43 = ptrtoint i8* %42 to i64 
  %44 = inttoptr i64 %43 to i64* 
  %45 = getelementptr  i64, i64* %44, i64 0 
  store  i64 %3, i64* %45 
  %46 = add   i64 %43, 8 
  %47 = inttoptr i64 %46 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  store  i64 %35, i64* %48 
  %49 = trunc i64 16 to i32  
  %50 = tail call ccc  i8*  @wybe_malloc(i32  %49)  
  %51 = ptrtoint i8* %50 to i64 
  %52 = inttoptr i64 %51 to i64* 
  %53 = getelementptr  i64, i64* %52, i64 0 
  store  i64 6, i64* %53 
  %54 = add   i64 %51, 8 
  %55 = inttoptr i64 %54 to i64* 
  %56 = getelementptr  i64, i64* %55, i64 0 
  store  i64 0, i64* %56 
  %57 = trunc i64 16 to i32  
  %58 = tail call ccc  i8*  @wybe_malloc(i32  %57)  
  %59 = ptrtoint i8* %58 to i64 
  %60 = inttoptr i64 %59 to i64* 
  %61 = getelementptr  i64, i64* %60, i64 0 
  store  i64 4, i64* %61 
  %62 = add   i64 %59, 8 
  %63 = inttoptr i64 %62 to i64* 
  %64 = getelementptr  i64, i64* %63, i64 0 
  store  i64 %51, i64* %64 
  %65 = trunc i64 16 to i32  
  %66 = tail call ccc  i8*  @wybe_malloc(i32  %65)  
  %67 = ptrtoint i8* %66 to i64 
  %68 = inttoptr i64 %67 to i64* 
  %69 = getelementptr  i64, i64* %68, i64 0 
  store  i64 ptrtoint (i64 (i64, i64)* @"higher_order_append.gen#1<1>" to i64), i64* %69 
  %70 = getelementptr  i64, i64* %68, i64 1 
  store  i64 %59, i64* %70 
  %71 = alloca i64 
   call fastcc  void  @"wybe.list.map<1>"(i64  %67, i64  %43, i64*  %71)  
  %72 = load  i64, i64* %71 
  tail call fastcc  void  @"wybe.list.println<1>"(i64  %43)  
  tail call fastcc  void  @"wybe.list.println<1>"(i64  %72)  
  ret void 
}


define external fastcc  void @"higher_order_append.append<0>"(i64  %"front##0", i64  %"back##0", i64*  %"result##0")    {
entry:
  %"1#tmp#3##0" = icmp ne i64 %"front##0", 0 
  br i1 %"1#tmp#3##0", label %if.then, label %if.else 
if.then:
  %73 = inttoptr i64 %"front##0" to i64* 
  %74 = getelementptr  i64, i64* %73, i64 0 
  %75 = load  i64, i64* %74 
  %76 = add   i64 %"front##0", 8 
  %77 = inttoptr i64 %76 to i64* 
  %78 = getelementptr  i64, i64* %77, i64 0 
  %79 = load  i64, i64* %78 
  %80 = trunc i64 16 to i32  
  %81 = tail call ccc  i8*  @wybe_malloc(i32  %80)  
  %82 = ptrtoint i8* %81 to i64 
  %83 = inttoptr i64 %82 to i64* 
  %84 = getelementptr  i64, i64* %83, i64 0 
  store  i64 %75, i64* %84 
  %85 = add   i64 %82, 8 
  %86 = inttoptr i64 %85 to i64* 
  store  i64 %82, i64* %"result##0" 
  musttail call fastcc  void  @"higher_order_append.append<0>"(i64  %79, i64  %"back##0", i64*  %86)  
  ret void 
if.else:
  store  i64 %"back##0", i64* %"result##0" 
  ret void 
}


define external fastcc  i64 @"higher_order_append.gen#1<0>"(i64  %"cons##0", i64  %"anon#1#1##0")    {
entry:
  %87 = alloca i64 
   call fastcc  void  @"higher_order_append.append<0>"(i64  %"anon#1#1##0", i64  %"cons##0", i64*  %87)  
  %88 = load  i64, i64* %87 
  ret i64 %88 
}


define external fastcc  i64 @"higher_order_append.gen#1<1>"(i64  %"#env##0", i64  %"anon#1#1##0")    {
entry:
  %89 = add   i64 %"#env##0", 8 
  %90 = inttoptr i64 %89 to i64* 
  %91 = getelementptr  i64, i64* %90, i64 0 
  %92 = load  i64, i64* %91 
  %93 = alloca i64 
   call fastcc  void  @"higher_order_append.append<0>"(i64  %"anon#1#1##0", i64  %92, i64*  %93)  
  %94 = load  i64, i64* %93 
  ret i64 %94 
}
