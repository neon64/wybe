======================================================================
AFTER EVERYTHING:
 Module benchmark
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : benchmark.benchmark<0>
                    benchmark.cpu_time<0>
  imports         : use wybe
  resources       : 
  procs           : 

benchmark > public {impure} (0 calls)
0: benchmark.benchmark<0>
benchmark(func##0:{impure}(?T))<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} get_clock_time(?tmp#1##0:wybe.float) @benchmark:nn:nn
    ~func##0:{impure}(?T)(?out##0:T) #0 @benchmark:nn:nn
    foreign c {impure} get_clock_time(?tmp#2##0:wybe.float) @benchmark:nn:nn
    foreign llvm fsub(~tmp#2##0:wybe.float, ~tmp#1##0:wybe.float, ?seconds_elapsed##0:wybe.float) @float:nn:nn
    wybe.string.print<0>("Benchmark took ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @benchmark:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @float:nn:nn
    foreign c print_float(~seconds_elapsed##0:wybe.float, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @float:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @float:nn:nn
    wybe.string.print<0>(" seconds":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #4 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#7##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


cpu_time > public {inline,impure} (1 calls)
0: benchmark.cpu_time<0>
cpu_time(func##0:{impure}(?T), ?out##0:T, ?seconds_elapsed##0:wybe.float)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} get_clock_time(?started##0:wybe.float) @benchmark:nn:nn
    ~func##0:{impure}(?T)(?out##0:T) #0 @benchmark:nn:nn
    foreign c {impure} get_clock_time(?finished##0:wybe.float) @benchmark:nn:nn
    foreign llvm fsub(~finished##0:wybe.float, ~started##0:wybe.float, ?seconds_elapsed##0:wybe.float) @float:nn:nn

  LLVM code       :

; ModuleID = 'benchmark'


 


@benchmark.3 =    constant {i64, i64} { i64 8, i64 ptrtoint ([?? x i8]* @benchmark.2 to i64) }


@benchmark.1 =    constant {i64, i64} { i64 15, i64 ptrtoint ([?? x i8]* @benchmark.0 to i64) }


@benchmark.2 =    constant [?? x i8] c" seconds\00"


@benchmark.0 =    constant [?? x i8] c"Benchmark took \00"


declare external ccc  double @get_clock_time()    


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @print_float(double)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"benchmark.benchmark<0>"(i64  %"func##0")    {
entry:
  %0 = tail call ccc  double  @get_clock_time()  
  %1 = inttoptr i64 %"func##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = inttoptr i64 %2 to i64 (i64)* 
  %4 = tail call fastcc  i64  %3(i64  %"func##0")  
  %5 = tail call ccc  double  @get_clock_time()  
  %6 = fsub double %5, %0 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @benchmark.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_float(double  %6)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @benchmark.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  {i64, double} @"benchmark.cpu_time<0>"(i64  %"func##0") alwaysinline   {
entry:
  %0 = tail call ccc  double  @get_clock_time()  
  %1 = inttoptr i64 %"func##0" to i64* 
  %2 = load  i64, i64* %1 
  %3 = inttoptr i64 %2 to i64 (i64)* 
  %4 = tail call fastcc  i64  %3(i64  %"func##0")  
  %5 = tail call ccc  double  @get_clock_time()  
  %6 = fsub double %5, %0 
  %7 = insertvalue {i64, double} undef, i64 %4, 0 
  %8 = insertvalue {i64, double} %7, double %6, 1 
  ret {i64, double} %8 
}
--------------------------------------------------
 Module benchmark_lib
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : benchmark_lib.<0>
                    benchmark_lib.need<0>
  imports         : use benchmark
                    use wybe
  resources       : 
  procs           : 

module top-level code > public {inline,semipure} (0 calls)
0: benchmark_lib.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    benchmark_lib.#anon#1<0><{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @benchmark_lib:nn:nn
    benchmark.benchmark<0>(benchmark_lib.#anon#2<1><>:{impure}(?wybe.int))<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @benchmark_lib:nn:nn


#anon#1 > {inline,impure} (1 calls)
0: benchmark_lib.#anon#1<0>
#anon#1()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} get_clock_time(?tmp#3##0:wybe.float) @benchmark:nn:nn
    benchmark_lib.#anon#1#anon#1<0>(?out##0:wybe.int) #0 @benchmark:nn:nn
    foreign c {impure} get_clock_time(?tmp#4##0:wybe.float) @benchmark:nn:nn
    foreign llvm fsub(~tmp#4##0:wybe.float, ~tmp#3##0:wybe.float, ?time##0:wybe.float) @float:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#6##0:wybe.phantom) @float:nn:nn
    foreign c print_float(~time##0:wybe.float, ~tmp#6##0:wybe.phantom, ?tmp#7##0:wybe.phantom) @float:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#7##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
#anon#1 > {inline,impure} (1 calls)
1: benchmark_lib.#anon#1<1>
#anon#1()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign c {impure} get_clock_time(?tmp#0##0:wybe.float) @benchmark:nn:nn
    benchmark_lib.#anon#1#anon#1<0>(?tmp#1##0:wybe.int) #1 @benchmark:nn:nn
    foreign c {impure} get_clock_time(?tmp#2##0:wybe.float) @benchmark:nn:nn
    foreign llvm fsub(~tmp#2##0:wybe.float, ~tmp#0##0:wybe.float, ?tmp#3##0:wybe.float) @float:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @float:nn:nn
    foreign c print_float(~tmp#3##0:wybe.float, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @float:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#6##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#6##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


#anon#1#anon#1 > {inline,impure} (1 calls)
0: benchmark_lib.#anon#1#anon#1<0>
#anon#1#anon#1(?anon#2#1##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    benchmark_lib.fib<0>(42:wybe.int, ?anon#2#1##0:wybe.int) #0 @benchmark_lib:nn:nn
#anon#1#anon#1 > {inline,impure} (1 calls)
1: benchmark_lib.#anon#1#anon#1<1>
#anon#1#anon#1(?anon#2#1##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    benchmark_lib.fib<0>(42:wybe.int, ?anon#2#1##0:wybe.int) #1 @benchmark_lib:nn:nn


#anon#2 > {inline,impure} (1 calls)
0: benchmark_lib.#anon#2<0>
#anon#2(?anon#3#1##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    benchmark_lib.fib<0>(42:wybe.int, ?anon#3#1##0:wybe.int) #0 @benchmark_lib:nn:nn
#anon#2 > {inline,impure} (1 calls)
1: benchmark_lib.#anon#2<1>
#anon#2(?anon#3#1##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    benchmark_lib.fib<0>(42:wybe.int, ?anon#3#1##0:wybe.int) #1 @benchmark_lib:nn:nn


fib > (4 calls)
0: benchmark_lib.fib<0>
fib(x##0:wybe.int, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_eq(x##0:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.bool) @int:nn:nn
    case ~tmp#8##0:wybe.bool of
    0:
        foreign llvm icmp_eq(x##0:wybe.int, 1:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
        case ~tmp#7##0:wybe.bool of
        0:
            foreign llvm sub(x##0:wybe.int, 1:wybe.int, ?tmp#4##0:wybe.int) @int:nn:nn
            benchmark_lib.fib<0>(~tmp#4##0:wybe.int, ?tmp#3##0:wybe.int) #3 @benchmark_lib:nn:nn
            foreign llvm sub(~x##0:wybe.int, 2:wybe.int, ?tmp#6##0:wybe.int) @int:nn:nn
            benchmark_lib.fib<0>(~tmp#6##0:wybe.int, ?tmp#5##0:wybe.int) #5 @benchmark_lib:nn:nn
            foreign llvm add(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?#result##0:wybe.int) @int:nn:nn

        1:
            foreign llvm move(1:wybe.int, ?#result##0:wybe.int) @benchmark_lib:nn:nn


    1:
        foreign llvm move(0:wybe.int, ?#result##0:wybe.int) @benchmark_lib:nn:nn



need > public {inline,semipure} (1 calls)
0: benchmark_lib.need<0>
need(stmt##0:{impure,resource}())<Everything; Everything>:
  AliasPairs: []
  InterestingCallProperties: []
    ~stmt##0:{impure,resource}() #0 @benchmark_lib:nn:nn

  LLVM code       :

; ModuleID = 'benchmark_lib'


 


@benchmark_lib.0 =    constant [1 x i64] [i64 ptrtoint (i64 (i64)* @"benchmark_lib.#anon#2<1>" to i64)]


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_float(double)    


declare external ccc  double @get_clock_time()    


declare external fastcc  void @"benchmark.benchmark<0>"(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"benchmark_lib.<0>"() alwaysinline   {
entry:
  tail call fastcc  void  @"benchmark_lib.#anon#1<0>"()  
  tail call fastcc  void  @"benchmark.benchmark<0>"(i64  ptrtoint (i64* getelementptr inbounds ([1 x i64], [1 x i64]* @benchmark_lib.0, i32 0, i32 0) to i64))  
  ret void 
}


define external fastcc  void @"benchmark_lib.#anon#1<0>"() alwaysinline   {
entry:
  %0 = tail call ccc  double  @get_clock_time()  
  %1 = tail call fastcc  i64  @"benchmark_lib.#anon#1#anon#1<0>"()  
  %2 = tail call ccc  double  @get_clock_time()  
  %3 = fsub double %2, %0 
  tail call ccc  void  @print_float(double  %3)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"benchmark_lib.#anon#1<1>"(i64  %"#env##0") alwaysinline   {
entry:
  %0 = tail call ccc  double  @get_clock_time()  
  %1 = tail call fastcc  i64  @"benchmark_lib.#anon#1#anon#1<0>"()  
  %2 = tail call ccc  double  @get_clock_time()  
  %3 = fsub double %2, %0 
  tail call ccc  void  @print_float(double  %3)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  i64 @"benchmark_lib.#anon#1#anon#1<0>"() alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"benchmark_lib.fib<0>"(i64  42)  
  ret i64 %0 
}


define external fastcc  i64 @"benchmark_lib.#anon#1#anon#1<1>"(i64  %"#env##0") alwaysinline   {
entry:
  %0 = musttail call fastcc  i64  @"benchmark_lib.fib<0>"(i64  42)  
  ret i64 %0 
}


define external fastcc  i64 @"benchmark_lib.#anon#2<0>"() alwaysinline   {
entry:
  %0 = tail call fastcc  i64  @"benchmark_lib.fib<0>"(i64  42)  
  ret i64 %0 
}


define external fastcc  i64 @"benchmark_lib.#anon#2<1>"(i64  %"#env##0") alwaysinline   {
entry:
  %0 = musttail call fastcc  i64  @"benchmark_lib.fib<0>"(i64  42)  
  ret i64 %0 
}


define external fastcc  i64 @"benchmark_lib.fib<0>"(i64  %"x##0")    {
entry:
  %0 = icmp eq i64 %"x##0", 0 
  br i1 %0, label %if.then, label %if.else 
if.then:
  ret i64 0 
if.else:
  %1 = icmp eq i64 %"x##0", 1 
  br i1 %1, label %if.then1, label %if.else1 
if.then1:
  ret i64 1 
if.else1:
  %2 = sub   i64 %"x##0", 1 
  %3 = tail call fastcc  i64  @"benchmark_lib.fib<0>"(i64  %2)  
  %4 = sub   i64 %"x##0", 2 
  %5 = tail call fastcc  i64  @"benchmark_lib.fib<0>"(i64  %4)  
  %6 = add   i64 %3, %5 
  ret i64 %6 
}


define external fastcc  void @"benchmark_lib.need<0>"(i64  %"stmt##0") alwaysinline   {
entry:
  %0 = inttoptr i64 %"stmt##0" to i64* 
  %1 = load  i64, i64* %0 
  %2 = inttoptr i64 %1 to void (i64)* 
  tail call fastcc  void  %2(i64  %"stmt##0")  
  ret void 
}
