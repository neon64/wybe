# constructors null | node(val: int, left: _, right: _)

# UNSAFE
# this forcibly writes without checking whether it is the correct variant or not
def {inline} unsafe_update_tail(!x:list(T), field:list(T)) {
    foreign lpvm mutate(x, ?x, 8, 1, 16, 0, field)
}

def partition(p: {test}(T), l: list(T), ?yes: list(T), ?no: list(T)) {
    if { [?h | ?t] = l ::
            if { p(h) ::
                partition(p, t, ?yes0, ?no0)
                ?yes = [h|yes0]
                # Since we use `no0` as our output `no`, `no0` isn't marked as "last use",
                # and so this mutate() cannot be part of the mutate chain.
                # This tests a very weird corner case where `no` becomes
                # outByReference but `yes` doesn't.
                unsafe_update_tail(!yes, no0)
                ?no = no0
                | else ::
                partition(p, t, ?yes0, ?no0)
                ?yes = yes0
                ?no = [h|no0]
            }
        | else ::
            ?yes = []
            ?no = []
    }
}
?l = [1,2,9,3,4,5,6,7]
!println(l, print)
partition({test} { @1 >= 3}, l, ?yes, ?no)
!print(yes, print)
!print(", ")
!print(no, print)
!nl

# }
# ?x = node(1, null, null)
# ?x2 = node(2, null, null)
# append_tree(x, x2, ?x3)
# !print_tree(x2)
# !nl
# !print_tree(x3)
# !nl
# }