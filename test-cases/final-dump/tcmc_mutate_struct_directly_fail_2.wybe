# suboptimal code generation at the moment - we want to
# write `l ,, l2` directly into second field of the structure `combined`.

type combined(T) {
    pub combined(x: T, y: list(T))
}

pub def appendstuff(l: list(int), l2: list(int), ?result: combined(int)) {
    ?l3 = l ,, l2
    ?result = combined(123, [])
    !result^combined.y = l3
    # here we get this {noalias} flag popping up... No idea how that is supposed
    # to work. Isn't it equivalent-ish to "destructive"
}

appendstuff([1,2,3], [4,5,6], ?l2)
!println(combined.x(l2))
!println(combined.y(l2), print)
# !println(combined.z(l2), print)