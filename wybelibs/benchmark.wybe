# purpose: Utilities for benchmarking Wybe code
# since  : 0.1

use foreign object benchmark_impl

# Nice high-level wrapper around `start` and `finish`,
# it will return the time it takes to run `func`, a higher-order proc
pub def measure(func: {impure} (), ?seconds_elapsed: float) {
    start(?started)
    !func()
    finish(started, ?seconds_elapsed)
}

# Starts a measurement
#
# Usage note: every call to `start` should be matched with exactly one call to
# `finish`, since internally `start` and `finish` malloc and
# free a internal C data structure.
pub def start(?started: float) {
    foreign c get_clock_time(?started)
}

# Completes a measurement, returns a floating-point number seconds_elapsed
# This may only be called once (this is enforced by the compiler since the
# state argument is marked with `{unique}`)
pub def finish(started: float, ?seconds_elapsed: float) {
    foreign c get_clock_time(?finished)
    ?seconds_elapsed = finished - started
}
